{"version":3,"sources":["services/authServices.js","services/variables.js","AppContext.js","utils/notification.js","Components/AuthForm/authForm.js","Routes.js","Components/Navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","withCredentials","login","credentials","post","signup","logout","AppContext","createContext","buildNotification","message","status","icon","pos","UIkit","notification","AuthForm","state","user","handleChange","e","target","name","value","setState","handleSubmit","preventDefault","isLogin","props","location","pathname","setUser","context","action","history","nextRoute","then","res","data","localStorage","setItem","JSON","stringify","push","catch","err","console","log","response","msg","this","className","onSubmit","htmlFor","uk-icon","onChange","id","type","required","to","Component","contextType","Routes","exact","path","component","Navbar","uk-navbar","_id","uk-grid","onClick","App","parse","getItem","removeItem","Provider","AppWithRouter","withRouter","Boolean","window","hostname","match","use","Icons","WithRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.49c209ae.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { base_url } from \"./variables\";\n\naxios.defaults.withCredentials = true;\n\nexport const login = (credentials) => {\n  return axios.post(`${base_url}/login`, credentials);\n};\n\nexport const signup = (credentials) => {\n  return axios.post(`${base_url}/signup`, credentials);\n};\n\nexport const logout = () => {\n  return axios.post(`${base_url}/logout`);\n};","const isProduction = process.env.NODE_ENV === \"production\";\nexport const base_url = isProduction\n  ? \"production.com\"\n  : \"http://localhost:3000/api\";","import {createContext} from \"react\"\n\nconst AppContext = createContext();\n\nexport default AppContext;","import UIkit from \"uikit\";\n\nexport const buildNotification = (\n  message,\n  status,\n  icon = \"check\",\n  pos = \"top-right\"\n) => {\n  UIkit.notification({\n    message: `<span uk-icon='icon: ${icon}'></span> ${message}`,\n    status,\n    pos,\n  });\n};","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { login, signup } from \"../../services/authServices\";\nimport AppContext from \"../../AppContext\";\nimport { buildNotification } from \"../../utils/notification\";\n\nclass AuthForm extends Component {\n  static contextType = AppContext;\n  state = {\n    user: {},\n  };\n\n  handleChange = (e) => {\n    let { user } = this.state;\n    user = { ...user, [e.target.name]: e.target.value };\n    this.setState({ user });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const isLogin = this.props.location.pathname === \"/login\";\n    const { setUser } = this.context;\n    const { user: credentials } = this.state;\n    const action = isLogin ? login : signup;\n    const { history } = this.props;\n    const nextRoute = isLogin ? \"/\" : \"/login\";\n    action(credentials)\n      .then((res) => {\n        if (isLogin) {\n          const { user } = res.data;\n          localStorage.setItem(\"user\", JSON.stringify(user));\n          setUser(user);\n        }\n        history.push(nextRoute);\n      })\n      .catch((err) => {\n        console.log(err);\n        buildNotification(err.response.data.msg, \"danger\", \"close\");\n      });\n  };\n\n  render() {\n    const isLogin = this.props.location.pathname === \"/login\";\n    return (\n      <section className=\"uk-section\">\n      <div className=\"uk-container uk-flex uk-flex-center\">\n          <div className=\"uk-width-1-4\">\n              <h3>{isLogin ? \"Login\" : \"Signup\"}</h3>\n              <form\n              onSubmit={this.handleSubmit} \n              className=\"uk-width-1-1 uk-form-stacked uk-flex uk-flex-center uk-flex-column\"\n              >\n                  {!isLogin ? (\n                      <div>\n                          <div className=\"uk-margin\">\n                              <label className=\"uk-form-label\" htmlFor=\"name\">\n                                  Name:\n                              </label>\n                              <div className=\"uk-inline\">\n                                  <span\n                                      className=\"uk-form-icon uk-form-icon-flip\"\n                                      uk-icon=\"icon: user\"\n                                  ></span>\n                                  <input\n                                      onChange={this.handleChange}\n                                      id=\"name\"\n                                      name=\"name\"\n                                      className=\"uk-input\"\n                                      type=\"text\"\n                                      required\n                                  />\n                              </div>\n                          </div>\n                          <div>\n                              <label className=\"uk-form-label\" htmlFor=\"last_name\">\n                                  Last name:\n                              </label>\n                              <div className=\"uk-inline\">\n                                  <span\n                                      className=\"uk-form-icon uk-form-icon-flip\"\n                                      uk-icon=\"icon: user\"\n                                  ></span>\n                                  <input\n                                      onChange={this.handleChange}\n                                      id=\"last_name\"\n                                      name=\"last_name\"\n                                      className=\"uk-input\"\n                                      type=\"text\"\n                                      required\n                                  />\n                              </div>\n                          </div>        \n                      </div>                \n                  ) : null}\n                  <div className=\"uk-margin\">\n                      <label className=\"uk-form-label\" htmlFor=\"email\">\n                          Email:\n                      </label>\n                      <div className=\"uk-inline\">\n                          <span\n                              className=\"uk-form-icon uk-form-icon-flip\"\n                              uk-icon=\"icon: mail\"\n                          ></span>\n                          <input\n                              onChange={this.handleChange}\n                              id=\"email\"\n                              name=\"email\"\n                              className=\"uk-input\"\n                              type=\"email\"\n                              required\n                          />\n                      </div>\n                      <div className=\"uk-margin\">\n                          <label className=\"uk-form-label\" htmlFor=\"password\">\n                              Password:\n                          </label>\n                          <div className=\"uk-inline\">\n                              <span\n                                  className=\"uk-form-icon uk-form-icon-flip\"\n                                  uk-icon=\"icon: lock\"\n                              ></span>\n                              <input\n                                  onChange={this.handleChange}\n                                  id=\"password\"\n                                  name=\"password\"\n                                  className=\"uk-input\"\n                                  type=\"password\"\n                                  required\n                              />\n                          </div>\n                      </div>\n                  </div>\n                  {isLogin ? (\n                      <div className=\"uk-text-meta\">\n                          Don't have an account?{\" \"}\n                          <Link className=\"uk-text-primary\" to=\"/signup\">\n                              Sign up\n                          </Link>\n                      </div>\n                  ) : null}\n                  <button className=\"uk-button uk-button-primary\">\n                      {isLogin ? \"Login\" : \"Signup\"}\n                  </button>\n              </form>\n          </div>\n      </div>\n  </section>   \n    );\n  }\n}\n\nexport default AuthForm;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport AuthForm from \"./Components/AuthForm/authForm\";\n\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/login\" component={AuthForm} />\n    <Route exact path=\"/signup\" component={AuthForm} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = ({ user, logout }) => {\n  return (\n    <header>\n      <nav className=\"uk-navbar-container\" uk-navbar=\"true\">\n        <div className=\"uk-navbar-left\">\n          <ul className=\"uk-navbar-nav\">\n            <li className=\"uk-active\">\n              <Link to=\"/\">Alambic</Link>\n            </li>\n          </ul>\n        </div>\n        <div className=\"uk-navbar-right\">\n          <ul className=\"uk-navbar-nav\">\n            {user._id ? (\n              <li>\n                <Link to=\"/profile\">\n                  <div className=\"uk-grid-small uk-flex-middle\" uk-grid=\"true\">\n                    <div className=\"uk-width-expand\">\n                      <div className=\"uk-margin-remove-bottom\">Hi {user.name}!</div>\n                    </div>\n                  </div>\n                </Link>\n                <div className=\"uk-navbar-dropdown\">\n                  <ul className=\"uk-nav uk-navbar-dropdown-nav\">\n                    <li onClick={logout}>Logout</li>\n                  </ul>\n                </div>\n              </li>\n            ) : (\n                <li>\n                  <Link to=\"/login\">Login</Link>\n                </li>\n              )}\n          </ul>\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport Navbar from \"./Components/Navbar/navbar\";\nimport AppContext from \"./AppContext\";\nimport { withRouter } from \"react-router\";\nimport { logout } from \"./services/authServices\";\n// import { denormalizeData, normalizeData } from \"./utils/dataUtils\";\n// import { getProperties } from \"./services/propertyServices\";\n\nclass App extends Component {\n  state = {\n    user: JSON.parse(localStorage.getItem(\"user\")) || {},\n  };\n\n  setUser = (user) => {\n    this.setState({ user });\n  };\n\n  logout = () => {\n    const { history } = this.props;\n    logout().then(() => {\n      localStorage.removeItem(\"user\");\n      this.setState({ user: {} });\n      history.push(\"/login\");\n    });\n  };\n\n  render() {\n    const { state, setUser, logout } = this;\n    return (\n      <AppContext.Provider\n        value={{\n          state,\n          setUser,\n          logout,\n        }}\n      >\n        <div className=\"App\">\n          <Navbar user={state.user} logout={logout} />\n          <Routes />\n        </div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nconst AppWithRouter = withRouter(App);\n\nexport default AppWithRouter;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport UIkit from \"uikit\";\nimport \"uikit/dist/css/uikit.min.css\";\nimport Icons from \"uikit/dist/js/uikit-icons\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nUIkit.use(Icons);\n\nconst WithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(<WithRouter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}